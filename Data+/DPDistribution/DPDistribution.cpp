/* ------------------------------------------------------------------ 

	Title: DPDistribution

	Description:  Distribution analysis for Data+

	Author :
		Stephen Wardlaw, M.D.
		Medical Research & Development
		Highrock
		Lyme, CT 06371

	Edit History:	
		14 April, 2000
			Created
		
------------------------------------------------------------------ */
#include "DPDistribution.h"
#include "DPGlobals.h"
#include "DPData.h"
#include "DPGpSelect.h"
#include "WU_AppUtils.h"
#include "UStringFmt_Utils.h"
#include "U_Conversions.h"

#include <AppKit.h>
#include <StorageKit.h>

const unsigned char largeIcon_bits [] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x1d,0x1d,0x1c,0x1b,0x1b,0x1b,0x1a,0x1a,0x19,0x18,0x18,0x17,0x16,0x16,0x16,
	0x15,0x15,0x14,0x13,0x13,0x00,0x2a,0x00,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x00,
	0x00,0x1d,0x17,0x17,0x16,0x16,0x16,0x16,0x16,0x15,0x15,0x15,0x14,0x14,0x14,0x13,
	0x13,0x12,0x12,0x12,0x12,0x00,0x2a,0x2a,0x00,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x00,
	0x00,0x1c,0x16,0x16,0x16,0x16,0x16,0x15,0x15,0x15,0x14,0x14,0x13,0x13,0x13,0x12,
	0x12,0x12,0x12,0x12,0x12,0x00,0x2a,0x2a,0x2a,0x00,0x3f,0x3f,0x3f,0x3f,0x3f,0x00,
	0x00,0x1b,0x16,0x16,0x16,0x15,0x15,0x15,0x14,0x14,0x13,0x13,0x13,0x12,0x12,0x12,
	0x12,0x12,0x12,0x11,0x11,0x00,0x2a,0x2a,0x2a,0x2a,0x00,0x3f,0x3f,0x3f,0x3f,0x00,
	0x00,0x1b,0x16,0x15,0x15,0x14,0x14,0x14,0x13,0x13,0x13,0x12,0x12,0x12,0x12,0x12,
	0x11,0x11,0x11,0x10,0x10,0x00,0x2a,0x2a,0x2a,0x2a,0x2a,0x00,0x3f,0x3f,0x3f,0x00,
	0x00,0x1b,0x15,0x14,0x14,0x14,0x13,0x13,0x13,0x12,0x12,0x12,0x12,0x12,0x11,0x11,
	0x11,0x10,0x10,0x10,0x0f,0x00,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,0x00,0x3f,0x3f,0x00,
	0x00,0x1a,0x14,0x14,0x13,0x13,0x12,0x12,0x12,0x12,0x12,0x12,0x11,0x11,0xf9,0xfa,
	0xfa,0x10,0x0f,0x0f,0x0e,0x00,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,0x00,0x3f,0x00,
	0x00,0x1a,0x13,0x13,0x12,0x12,0x12,0x12,0x12,0x12,0x11,0x11,0x11,0xf9,0xf9,0xfa,
	0xfa,0x45,0x0e,0x0e,0x0e,0x00,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,0x00,0x00,
	0x00,0x19,0x12,0x12,0x12,0x12,0x12,0x12,0x11,0x11,0x10,0x10,0x10,0xf9,0xf9,0xfa,
	0xfa,0x45,0x65,0x0d,0x0d,0x00,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,0x00,
	0x00,0x18,0x12,0x12,0x12,0x11,0x11,0x11,0x10,0x10,0x10,0x0f,0x5d,0xf9,0xf9,0xfa,
	0xfa,0x45,0x65,0x0d,0x0d,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x18,0x12,0x11,0x11,0x11,0x10,0x10,0x10,0x0f,0x0f,0x0f,0x5d,0xf9,0xf9,0xfa,
	0xfa,0x45,0x65,0x0d,0x0c,0x0c,0x0c,0x0b,0x0b,0x0a,0x0a,0x0a,0x09,0x09,0x08,0x00,
	0x00,0x17,0x11,0x11,0x10,0x10,0x10,0x0f,0x0f,0x0e,0x0e,0x0e,0x5d,0xf9,0xf9,0xfa,
	0xfa,0x45,0x65,0x6b,0x0b,0x0b,0x0b,0x0a,0x0a,0x0a,0x09,0x09,0x09,0x09,0x07,0x00,
	0x00,0x16,0x10,0x10,0x0f,0x0f,0x0f,0x0e,0x0e,0x0e,0x0d,0x98,0x5d,0xf9,0xf9,0xfa,
	0xfa,0x45,0x65,0x6b,0x0b,0x0a,0x0a,0x0a,0x09,0x09,0x09,0x09,0x09,0x08,0x07,0x00,
	0x00,0x16,0x0f,0x0f,0x0f,0x0e,0x0e,0x0e,0x0d,0x0d,0x0d,0x98,0x5d,0xf9,0xf9,0xfa,
	0xfa,0x45,0x65,0x6b,0x0a,0x0a,0x09,0x09,0x09,0x09,0x09,0x08,0x08,0x08,0x06,0x00,
	0x00,0x16,0x0f,0x0e,0x0e,0x0e,0x0d,0x0d,0x0d,0x0d,0x0d,0x98,0x5d,0xf9,0xf9,0xfa,
	0xfa,0x45,0x65,0x6b,0x6b,0x09,0x09,0x09,0x09,0x08,0x08,0x08,0x07,0x07,0x05,0x00,
	0x00,0x15,0x0e,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0c,0x7d,0x98,0x5d,0xf9,0xf9,0xfa,
	0xfa,0x45,0x65,0x6b,0x6b,0x09,0x09,0x08,0x08,0x08,0x07,0x07,0x06,0x06,0x05,0x00,
	0x00,0x15,0x0d,0x0d,0x0d,0x0d,0x0d,0x0c,0x0c,0x0c,0x7d,0x98,0x5d,0xf9,0xf9,0xfa,
	0xfa,0x45,0x65,0x6b,0x6b,0x08,0x08,0x07,0x07,0x07,0x06,0x06,0x06,0x05,0x04,0x00,
	0x00,0x14,0x0d,0x0d,0x0d,0x0c,0x0c,0x0b,0x0b,0x0b,0x7d,0x98,0x5d,0xf9,0xf9,0xfa,
	0xfa,0x45,0x65,0x6b,0x6b,0x07,0x07,0x07,0x06,0x06,0x06,0x05,0x05,0x04,0x04,0x00,
	0x00,0x13,0x0c,0x0c,0x0c,0x0b,0x0b,0x0b,0x0a,0x0a,0x7d,0x98,0x5d,0xf9,0xf9,0xfa,
	0xfa,0x45,0x65,0x6b,0x6b,0x71,0x06,0x06,0x06,0x05,0x05,0x04,0x04,0x04,0x04,0x00,
	0x00,0x13,0x0c,0x0b,0x0b,0x0b,0x0a,0x0a,0x0a,0x7d,0x7d,0x98,0x5d,0xf9,0xf9,0xfa,
	0xfa,0x45,0x65,0x6b,0x6b,0x71,0x05,0x05,0x05,0x04,0x04,0x04,0x04,0x04,0x03,0x00,
	0x00,0x12,0x0b,0x0b,0x0a,0x0a,0x09,0x09,0x09,0x7d,0x7d,0x98,0x5d,0xf9,0xf9,0xfa,
	0xfa,0x45,0x65,0x6b,0x6b,0x71,0x05,0x04,0x04,0x04,0x04,0x04,0x03,0x03,0x02,0x00,
	0x00,0x12,0x0a,0x0a,0x09,0x09,0x09,0x09,0x09,0x7d,0x7d,0x98,0x5d,0xf9,0xf9,0xfa,
	0xfa,0x45,0x65,0x6b,0x6b,0x71,0x04,0x04,0x04,0x04,0x03,0x03,0x03,0x02,0x02,0x00,
	0x00,0x12,0x09,0x09,0x09,0x09,0x09,0x09,0x9d,0x7d,0x7d,0x98,0x5d,0xf9,0xf9,0xfa,
	0xfa,0x45,0x65,0x6b,0x6b,0x71,0x90,0x04,0x03,0x03,0x03,0x02,0x02,0x02,0x01,0x00,
	0x00,0x11,0x09,0x09,0x09,0x08,0x08,0x9d,0x9d,0x7d,0x7d,0x98,0x5d,0xf9,0xf9,0xfa,
	0xfa,0x45,0x65,0x6b,0x6b,0x71,0x90,0x96,0x03,0x02,0x02,0x01,0x01,0x01,0x00,0x00,
	0x00,0x10,0x09,0x08,0x08,0x08,0x07,0x07,0x07,0x06,0x06,0x05,0x05,0x05,0x04,0x04,
	0x04,0x04,0x04,0x04,0x03,0x03,0x02,0x02,0x02,0x01,0x01,0x01,0x00,0x00,0x00,0x00,
	0x00,0x10,0x08,0x08,0x07,0x07,0x07,0x06,0x06,0x05,0x05,0x05,0x04,0x04,0x04,0x04,
	0x04,0x04,0x03,0x03,0x02,0x02,0x02,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x0f,0x07,0x07,0x06,0x06,0x06,0x05,0x05,0x05,0x04,0x04,0x04,0x04,0x04,0x03,
	0x03,0x03,0x02,0x02,0x02,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x0e,0x06,0x06,0x06,0x05,0x05,0x05,0x04,0x04,0x04,0x04,0x04,0x03,0x03,0x03,
	0x02,0x02,0x02,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x0e,0x06,0x05,0x05,0x05,0x04,0x04,0x04,0x04,0x04,0x03,0x03,0x03,0x02,0x02,
	0x02,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x0d,0x0d,0x0d,0x0c,0x0b,0x0b,0x0a,0x09,0x09,0x09,0x08,0x07,0x07,0x06,0x05,
	0x05,0x04,0x04,0x04,0x03,0x02,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};

const unsigned char smallIcon_bits [] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x16,0x16,0x15,0x15,0x14,0x13,0x12,0x12,0x12,0x00,0x2a,0x00,0x3f,0x3f,0x00,
	0x00,0x15,0x14,0x14,0x13,0x12,0x12,0x12,0x11,0x10,0x00,0x2a,0x2a,0x00,0x3f,0x00,
	0x00,0x14,0x13,0x12,0x12,0x12,0x11,0xfa,0x10,0x0f,0x00,0x2a,0x2a,0x2a,0x00,0x00,
	0x00,0x12,0x12,0x12,0x11,0x10,0xf9,0xfa,0x45,0x0d,0x00,0x2a,0x2a,0x2a,0x2a,0x00,
	0x00,0x11,0x11,0x10,0x0f,0x0f,0xf9,0xfa,0x45,0x0d,0x0c,0x0b,0x0a,0x0a,0x09,0x00,
	0x00,0x10,0x0f,0x0e,0x0e,0x98,0xf9,0xfa,0x45,0x6b,0x0a,0x0a,0x09,0x09,0x08,0x00,
	0x00,0x0e,0x0e,0x0d,0x0d,0x98,0xf9,0xfa,0x45,0x6b,0x09,0x09,0x08,0x08,0x07,0x00,
	0x00,0x0d,0x0d,0x0c,0x0c,0x98,0xf9,0xfa,0x45,0x6b,0x08,0x07,0x07,0x06,0x05,0x00,
	0x00,0x0c,0x0b,0x0b,0x0a,0x98,0xf9,0xfa,0x45,0x6b,0x71,0x06,0x05,0x04,0x04,0x00,
	0x00,0x0b,0x0a,0x09,0x7d,0x98,0xf9,0xfa,0x45,0x6b,0x71,0x04,0x04,0x04,0x03,0x00,
	0x00,0x09,0x09,0x09,0x7d,0x98,0xf9,0xfa,0x45,0x6b,0x71,0x04,0x03,0x02,0x02,0x00,
	0x00,0x08,0x08,0x07,0x06,0x05,0x05,0x04,0x04,0x04,0x03,0x02,0x01,0x01,0x00,0x00,
	0x00,0x07,0x06,0x05,0x05,0x04,0x04,0x03,0x03,0x02,0x01,0x01,0x00,0x00,0x00,0x00,
	0x00,0x05,0x05,0x04,0x04,0x03,0x03,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
// -------------------------------------------------------------------
//	* MAIN Program
// -------------------------------------------------------------------
int
main()
{
	DPDistribution theApp;

	theApp.Run();

	return(0);
}
// -------------------------------------------------------------------
//	* CONSTRUCTORS and DESTRUCTORS
// -------------------------------------------------------------------
DPDistribution::DPDistribution() : BApplication(data_plus_dist_sig)
{

	// Install this app if necessary
	BMimeType mime(data_plus_dist_sig);
	if (mime.InitCheck() == B_OK && !mime.IsInstalled()) {
		mime.Install();
	}

	// Install data type and icons
	BMimeType dataMime(distplot_mime_type);
	// dataMime.Delete(); 	//***************
	if (dataMime.InitCheck() == B_OK && !dataMime.IsInstalled()) {
		dataMime.Install();
		// Set the document icons
		status_t status;
		BBitmap* lgIcon = new BBitmap(BRect(0,0,31,31),B_CMAP8);
		lgIcon->SetBits(largeIcon_bits,sizeof(largeIcon_bits),0,B_CMAP8);
		status = dataMime.SetIcon(lgIcon,B_LARGE_ICON);
		delete lgIcon;

		BBitmap* miniIcon = new BBitmap(BRect(0,0,15,15),B_CMAP8);
		miniIcon->SetBits(smallIcon_bits,sizeof(smallIcon_bits),0,B_CMAP8);
		status = dataMime.SetIcon(miniIcon,B_MINI_ICON);
		delete miniIcon;
	}

	// We should get preference data for this
	
	mData = new BList();
	
	// Make the distribuion data window
	mDistType = distType_distribution;
	BRect	dataRect;
	dataRect.Set(100, 100, 450, 450);
	mDistWindow = new DPDistWindow(dataRect);
	mDistWindow->Show();
}

DPDistribution::~DPDistribution()
{
	for(int32 items = 0; items < mData->CountItems(); items++) {
		DPDistData* theDData = (DPDistData*)mData->ItemAt(items);
		delete theDData;
	}
	delete mData;
}
// -------------------------------------------------------------------
//	* PUBLIC METHODS
// ------------------------------------------------------------------ 
void
DPDistribution::AboutRequested()
{
	BAlert* theAlert = new BAlert("","DataPlus Distribution Tool V1.0.2 Final\n By: Stephen Wardlaw, M.D. swardlaw@connix.com","OK");
	theAlert->Go();
}
// -------------------------------------------------------------------
void
DPDistribution::AddDisplaySet(DPData* theData)
{
	DPDistData* theDData = new DPDistData(theData);
	mData->AddItem(theDData);
	mDistWindow->AddDisplay(theDData);
}
// -------------------------------------------------------------------
const DPData*
DPDistribution::Data(int16 setNum) const
{
	DPDistData* theData = (DPDistData*)mData->ItemAt(setNum);
	if(theData != NULL) {
		return theData->Data();
	}
	return NULL;
}
// -------------------------------------------------------------------
void
DPDistribution::MessageReceived(BMessage* theMesg)
{
	DPData* theData;
	BMessage* theSet;
	BArchivable* theObj;
	int32	index = 0;
	status_t status = B_OK;
	entry_ref theRef;
	BString theString;
	bool setSep = false;
	
	switch (theMesg->what) {
	
		case DPData::fld_code :
			while(status == B_OK) {
				theSet = new BMessage();
				status = theMesg->FindMessage(data_set_str,index++,theSet);
				if(status == B_OK) {
					theObj = instantiate_object(theSet);
					if(theObj != NULL) {
						theData = cast_as(theObj,DPData);
						if(theData != NULL) {
							if(setSep) {
								theString.Append("+");
							}
							theString.Append(theData->SetName());
							setSep = true;
							AddDisplaySet(theData);
						}
					}
				}	// if(status == B_OK)
				delete theSet;
			}	// Of while(status == B_OK)
			if(Data(0) != NULL) {
				BString theString;
				Data(0)->MakeTitleString(&theString,true);
				mDistWindow->SetTitle(theString.String());
			}
			mDistWindow->PostMessage(FLDS_RESET);
			break;
			
		case launch_mesg :
			status = theMesg->FindRef("refs",&theRef);;
			if(status == B_OK) {
				mDistWindow->OpenFile(&theRef);
			}
			mDistWindow->PostMessage(FLDS_RESET);
			break;
			
		case mesg_mark :	// A series of data to be marked
			DetachCurrentMessage();
			MarkData(theMesg);
			break;
			
		case set_display :	// Set data set characteristics
			SetDisplays(theMesg);
			break;
			
		case mesg_gpSize :
			mDistWindow->MessageReceived(theMesg);
			break;
			
		default :
			BApplication::MessageReceived(theMesg);
	}
}
// -------------------------------------------------------------------
void
DPDistribution::SetDisplays(BMessage* theMesg)
{
	record_key theKey;
	theMesg->FindInt64(disp_set_name,&theKey);
	for(int32 setNum = 0; setNum < NumSets(); setNum++) {
		const DPData* theData = Data(setNum);
		if(theData != NULL && theKey == theData->Key()) {
			DPDistData* theDData = (DPDistData*)DataSet(setNum);
			theDData->SetDataColor(::ValueToColor(theMesg->FindInt32(mark_col_name)));
			mDistWindow->ReDraw();
			return;	// *** EXIT HERE if found
		}
	}
}	
// -------------------------------------------------------------------
//	* Protected Methods
// ------------------------------------------------------------------ 
void
DPDistribution::MarkData(BMessage* theMesg)
{	
	if(mDistWindow->AllowMarking()) {
		int32 setNum = 0;
		DPDistData* theDData = (DPDistData*)DataSet(setNum++);
		while (theDData != NULL) {
			DPData* theData = (DPData*)theDData->Data();
			theData->MarkData(theMesg);
			//theDData->Recalculate();
			theDData = (DPDistData*)DataSet(setNum++);
		}
		mDistWindow->PostMessage(FLDS_RESET);
	}
	delete theMesg;
}
// -------------------------------------------------------------------
void
DPDistribution::RefsReceived(BMessage* theMesg)
{
	entry_ref theRef;
	status_t status = theMesg->FindRef("refs",&theRef);;
	if(status == B_OK) {
		mDistWindow->OpenFile(&theRef);
	}
}
// -------------------------------------------------------------------
