	(* Constants for distribution output window *)	dist_frameThick       = 3;                   (* Frame width of data windows *)	dist_numLines  = 7;	dist_header  = "Distribution Data For ";	dist_test   = " Mean: XXXXX | S.D: XXXXX | +/- 2SD: XXXXXX - XXXXXX";	dist_pctile    = "PERCENTILES";		dist_defTitle   = "Distribution Plot #";(* ---------------------------------------------------------------- *)(* Calculates the size of the distribution data window.             *)PROCEDURE CalcDistSize(VAR width,height:INTEGER);VAR	font:FontInfo;	BEGINGetFontInfo(font);WITH font DO                                 (* Calc size of a cell *)	fAscent := ascent;	fDescent := descent;	fDrop := descent + leading;	dist_frameThickth := widMax;	fHeight := ascent + descent + leading + 1;	END;width := StringWidth0(dist_test) + 4 + dist_frameThick*2;height := fHeight*dist_numLines + dist_frameThick*2;END CalcDistSize;(* ---------------------------------------------------------------- *)(* Draws the distribution output window.                            *)PROCEDURE DrawDistData(dpH:DPDHndl);VAR	row : ARRAY [1..dist_numLines] OF INTEGER;	mid,len,halfChar,N,ht,wd:INTEGER;	temp : ARRAY [0..127] OF CHAR;	tStr : ARRAY [0..15] OF CHAR;	ok:BOOLEAN;	frame:Rect;	start,posn:Point;	graf:GraphHndl;	pRec:PlotRecHandle;	dH:DistHandle;	stop,places:CARDINAL;	fmt:NumberFormat;		BEGINfmt := pRec^^.dataSet[0].xFmt;            (* Get correct formatting *)places := pRec^^.dataSet[0].xDPs;	GetPen(start);CalcDistSize(wd,ht);SetRect(frame,0,0,wd,ht);OffsetRect(frame,start.h,start.v);      (* Adjust for starting posn *)PenSize(dist_frameThick,dist_frameThick);FrameRect(frame);InsetRect(frame,dist_frameThick,dist_frameThick);                    (* Adjust for border *)WITH frame DO	mid := (right - left) DIV 2;	END;halfChar := dist_frameThickth DIV 2;                       (* Half-char spacer *)INC(mid,start.h);PenSize(1,1);INC(start.h,dist_frameThick);                        (* Adjust for frame width *)INC(start.v,dist_frameThick);FOR N := 1 TO dist_numLines DO                   (* Make a row of lines *)	row[N] := start.v + fHeight*N;	MoveTo(frame.left,row[N]);	LineTo(frame.right,row[N]);	END;MoveTo(mid,row[1]);LineTo(mid,row[2]);MoveTo(mid,row[4]);LineTo(mid,row[7]);FOR N := 1 TO dist_numLines DO              (* Correct for font descent *)	DEC(row[N],fDescent);	END;temp := dist_header;	Concat(temp,graf^^.title,temp);IF CompareStr(graf^^.title,pRec^^.dataSet[0].setTitle) <> 0 THEN		tStr := " / ";	Concat(temp,tStr,temp);	Concat(temp,pRec^^.dataSet[0].setTitle,temp);	END;MoveTo(mid - StringWidth0(temp) DIV 2,row[1]);DrawString0(temp);MoveTo(mid - StringWidth0(dist_pctile) DIV 2,row[4]);DrawString0(dist_pctile);HLock(dH);WITH dH^^ DO	MoveTo(start.h + halfChar,row[2]);	DrawString0("Samples: ");	ok := EncodeCard(0,stop,tStr,dSamples,1);	DrawString0(tStr);	MoveTo(mid + halfChar,row[2]);	DrawString0("Range: ");	FormatReal(fmt,dMin,places,tStr);	DrawString0(tStr);	DrawString0(" / ");	FormatReal(fmt,dMax,places,tStr);	DrawString0(tStr);		MoveTo(start.h + halfChar,row[3]);	DrawString0("Mean: ");	FormatReal(fmt,dMean,places + 1,tStr);	DrawString0(tStr);	DrawString0("  ");	GetPen(posn);	MoveTo(posn.h,row[2] + fDescent);	LineTo(posn.h,row[3] + fDescent);	MoveTo(posn.h + halfChar,row[3]);	DrawString0("SD: ");	FormatReal(fmt,dSD,places + 1,tStr);	DrawString0(tStr);	temp := "+/- 2SD: ";	FormatReal(fmt,dMean - dSD*2.0,places,tStr);	Concat(temp,tStr,temp);	Concat(temp," - ",temp);	FormatReal(fmt,dMean + dSD*2.0,places,tStr);	Concat(temp,tStr,temp);	MoveTo(frame.right - StringWidth0(temp) - halfChar*2,row[3]);	GetPen(posn);	MoveTo(posn.h,row[2] + fDescent);	LineTo(posn.h,row[3] + fDescent);	MoveTo(posn.h + halfChar,row[3]);	DrawString0(temp);		MoveTo(start.h + halfChar,row[5]);	DrawString0("1/99: ");	FormatReal(fmt,dLevel1L,places,tStr);	DrawString0(tStr);	DrawString0(" / ");	FormatReal(fmt,dLevel1H,places,tStr);	DrawString0(tStr);	MoveTo(mid + halfChar,row[5]);	DrawString0(" 3/97: ");	FormatReal(fmt,dLevel2L,places,tStr);	DrawString0(tStr);	DrawString0(" / ");	FormatReal(fmt,dLevel2H,places,tStr);	DrawString0(tStr);		MoveTo(start.h + halfChar,row[6]);	DrawString0("5/95: ");	FormatReal(fmt,dLevel3L,places,tStr);	DrawString0(tStr);	DrawString0(" / ");	FormatReal(fmt,dLevel3H,places,tStr);	DrawString0(tStr);	MoveTo(mid + halfChar,row[6]);	DrawString0("10/90: ");	FormatReal(fmt,dLevel4L,places,tStr);	DrawString0(tStr);	DrawString0(" / ");	FormatReal(fmt,dLevel4H,places,tStr);	DrawString0(tStr);		MoveTo(start.h + halfChar,row[7]);	DrawString0("Median Value: ");	FormatReal(fmt,dMedian,places,tStr);	DrawString0(tStr);	MoveTo(mid + halfChar,row[7]);	DrawString0("Mode Value: ");	IF dMode <> 0.0 THEN		FormatReal(fmt,dMode,places,tStr);		ELSE		tStr := "N.A.";		END;	DrawString0(tStr);		END;HUnlock(dH);	END DrawDistData;(* ---------------------------------------------------------------- *)istribPlot.